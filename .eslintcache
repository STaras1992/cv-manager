[{"C:\\Projects\\CvManager\\cv-manager\\src\\index.js":"1","C:\\Projects\\CvManager\\cv-manager\\src\\App.js":"2","C:\\Projects\\CvManager\\cv-manager\\src\\utills\\menu.js":"3","C:\\Projects\\CvManager\\cv-manager\\src\\consts\\measures.js":"4","C:\\Projects\\CvManager\\cv-manager\\src\\components\\Nav\\Nav.js":"5","C:\\Projects\\CvManager\\cv-manager\\src\\components\\CvPanel\\CvPanel.js":"6","C:\\Projects\\CvManager\\cv-manager\\src\\components\\CoverPanel\\CoverPanel.js":"7","C:\\Projects\\CvManager\\cv-manager\\src\\components\\CoverPanel\\Cover\\Cover.js":"8","C:\\Projects\\CvManager\\cv-manager\\src\\components\\TemplatePanel\\TemplatePanel.js":"9","C:\\Projects\\CvManager\\cv-manager\\src\\actions\\cvActions.js":"10","C:\\Projects\\CvManager\\cv-manager\\src\\consts\\actionTypes.js":"11","C:\\Projects\\CvManager\\cv-manager\\src\\api\\api.js":"12","C:\\Projects\\CvManager\\cv-manager\\src\\Store.js":"13","C:\\Projects\\CvManager\\cv-manager\\src\\reducers\\coverReducer.js":"14","C:\\Projects\\CvManager\\cv-manager\\src\\reducers\\templateReducer.js":"15","C:\\Projects\\CvManager\\cv-manager\\src\\reducers\\cvReducer.js":"16","C:\\Projects\\CvManager\\cv-manager\\src\\actions\\coverActions.js":"17","C:\\Projects\\CvManager\\cv-manager\\src\\consts\\colors.js":"18","C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\MyButton.js":"19","C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\DocViewer.js":"20","C:\\Projects\\CvManager\\cv-manager\\src\\actions\\optionsActions.js":"21","C:\\Projects\\CvManager\\cv-manager\\src\\reducers\\optionsReducer.js":"22","C:\\Projects\\CvManager\\cv-manager\\src\\styles\\panelStyle.js":"23","C:\\Projects\\CvManager\\cv-manager\\src\\components\\TemplatePanel\\TemplateForm.js":"24","C:\\Projects\\CvManager\\cv-manager\\src\\actions\\templateActions.js":"25","C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\FormSelect.js":"26","C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\FormInput.js":"27","C:\\Projects\\CvManager\\cv-manager\\src\\components\\CvPanel\\CvForm.js":"28","C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\FileInput.js":"29","C:\\Projects\\CvManager\\cv-manager\\src\\consts\\structs.js":"30","C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\FormTitle.js":"31","C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\FormFileInput.js":"32","C:\\Projects\\CvManager\\cv-manager\\src\\components\\CoverPanel\\CoverForm.js":"33","C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\DocListItem.js":"34","C:\\Projects\\CvManager\\cv-manager\\src\\styles\\formStyle.js":"35","C:\\Projects\\CvManager\\cv-manager\\src\\components\\SendMailPage\\SendMailPage.js":"36","C:\\Projects\\CvManager\\cv-manager\\src\\components\\SendMailPage\\SendForm.js":"37","C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\RichTextEditor.js":"38","C:\\Projects\\CvManager\\cv-manager\\src\\reducers\\userReducer.js":"39","C:\\Projects\\CvManager\\cv-manager\\src\\utills\\editorUtils.js":"40","C:\\Projects\\CvManager\\cv-manager\\src\\utills\\html.js":"41","C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\MyCheckBox.js":"42","C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\MyToolTip.js":"43","C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\MySwitch.js":"44","C:\\Projects\\CvManager\\cv-manager\\src\\components\\HomePage\\HomePage.js":"45","C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\HorizontalCard.js":"46","C:\\Projects\\CvManager\\cv-manager\\src\\reducers\\emailReducer.js":"47","C:\\Projects\\CvManager\\cv-manager\\src\\actions\\emailActions.js":"48","C:\\Projects\\CvManager\\cv-manager\\src\\components\\SignUp\\SignUp.js":"49","C:\\Projects\\CvManager\\cv-manager\\src\\components\\Login\\Login.js":"50","C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\FormInputLogin.js":"51","C:\\Projects\\CvManager\\cv-manager\\src\\actions\\userActions.js":"52","C:\\Projects\\CvManager\\cv-manager\\src\\utills\\cookies.js":"53","C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\PrivateRoute.js":"54","C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\ConfirmDialog.js":"55","C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\Alert.js":"56","C:\\Projects\\CvManager\\cv-manager\\src\\consts\\strings.js":"57","C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\BiSwitch.js":"58","C:\\Projects\\CvManager\\cv-manager\\src\\utills\\actionsUtils.js":"59","C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\Copyright.js":"60"},{"size":382,"mtime":1609755160917,"results":"61","hashOfConfig":"62"},{"size":1660,"mtime":1611937695208,"results":"63","hashOfConfig":"62"},{"size":663,"mtime":1611161153774,"results":"64","hashOfConfig":"62"},{"size":239,"mtime":1610179604113,"results":"65","hashOfConfig":"62"},{"size":7844,"mtime":1612117089755,"results":"66","hashOfConfig":"62"},{"size":5627,"mtime":1612114104798,"results":"67","hashOfConfig":"62"},{"size":5756,"mtime":1612114209766,"results":"68","hashOfConfig":"62"},{"size":5564,"mtime":1612106175680,"results":"69","hashOfConfig":"62"},{"size":5672,"mtime":1612115414828,"results":"70","hashOfConfig":"62"},{"size":5353,"mtime":1611946604534,"results":"71","hashOfConfig":"62"},{"size":2514,"mtime":1611425775718,"results":"72","hashOfConfig":"62"},{"size":2210,"mtime":1611863368409,"results":"73","hashOfConfig":"62"},{"size":747,"mtime":1611134771070,"results":"74","hashOfConfig":"62"},{"size":1691,"mtime":1611827209646,"results":"75","hashOfConfig":"62"},{"size":1752,"mtime":1611429179139,"results":"76","hashOfConfig":"62"},{"size":1588,"mtime":1611827195878,"results":"77","hashOfConfig":"62"},{"size":2883,"mtime":1611948336538,"results":"78","hashOfConfig":"62"},{"size":392,"mtime":1611504737696,"results":"79","hashOfConfig":"62"},{"size":1728,"mtime":1611827279640,"results":"80","hashOfConfig":"62"},{"size":323,"mtime":1611822811867,"results":"81","hashOfConfig":"62"},{"size":509,"mtime":1611426217260,"results":"82","hashOfConfig":"62"},{"size":1009,"mtime":1611425919479,"results":"83","hashOfConfig":"62"},{"size":854,"mtime":1612100220921,"results":"84","hashOfConfig":"62"},{"size":4680,"mtime":1611821331140,"results":"85","hashOfConfig":"62"},{"size":2979,"mtime":1611948394115,"results":"86","hashOfConfig":"62"},{"size":2722,"mtime":1611936546234,"results":"87","hashOfConfig":"62"},{"size":2313,"mtime":1611827266387,"results":"88","hashOfConfig":"62"},{"size":5258,"mtime":1612113171503,"results":"89","hashOfConfig":"62"},{"size":2031,"mtime":1611827261645,"results":"90","hashOfConfig":"62"},{"size":160,"mtime":1611688423117,"results":"91","hashOfConfig":"62"},{"size":1283,"mtime":1611827275353,"results":"92","hashOfConfig":"62"},{"size":1436,"mtime":1611827263700,"results":"93","hashOfConfig":"62"},{"size":4947,"mtime":1612114037669,"results":"94","hashOfConfig":"62"},{"size":5937,"mtime":1612430311213,"results":"95","hashOfConfig":"62"},{"size":362,"mtime":1611827136763,"results":"96","hashOfConfig":"62"},{"size":8687,"mtime":1612430283093,"results":"97","hashOfConfig":"62"},{"size":4303,"mtime":1611827929800,"results":"98","hashOfConfig":"62"},{"size":5990,"mtime":1611936562692,"results":"99","hashOfConfig":"62"},{"size":946,"mtime":1611938431360,"results":"100","hashOfConfig":"62"},{"size":3096,"mtime":1611759247579,"results":"101","hashOfConfig":"62"},{"size":1519,"mtime":1611827929275,"results":"102","hashOfConfig":"62"},{"size":1120,"mtime":1611823294574,"results":"103","hashOfConfig":"62"},{"size":940,"mtime":1611827286070,"results":"104","hashOfConfig":"62"},{"size":1728,"mtime":1611827283908,"results":"105","hashOfConfig":"62"},{"size":6060,"mtime":1612100350553,"results":"106","hashOfConfig":"62"},{"size":2382,"mtime":1611827277466,"results":"107","hashOfConfig":"62"},{"size":856,"mtime":1611827238267,"results":"108","hashOfConfig":"62"},{"size":1815,"mtime":1611948333779,"results":"109","hashOfConfig":"62"},{"size":5787,"mtime":1612099634011,"results":"110","hashOfConfig":"62"},{"size":5038,"mtime":1612099617866,"results":"111","hashOfConfig":"62"},{"size":1890,"mtime":1612099739206,"results":"112","hashOfConfig":"62"},{"size":2348,"mtime":1611994910783,"results":"113","hashOfConfig":"62"},{"size":289,"mtime":1611334754024,"results":"114","hashOfConfig":"62"},{"size":586,"mtime":1611940315180,"results":"115","hashOfConfig":"62"},{"size":3129,"mtime":1611827253564,"results":"116","hashOfConfig":"62"},{"size":198,"mtime":1611827249393,"results":"117","hashOfConfig":"62"},{"size":281,"mtime":1611945928635,"results":"118","hashOfConfig":"62"},{"size":1272,"mtime":1611827251511,"results":"119","hashOfConfig":"62"},{"size":470,"mtime":1611948458986,"results":"120","hashOfConfig":"62"},{"size":1048,"mtime":1612014110226,"results":"121","hashOfConfig":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},"wg62lo",{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"124"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"124"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"124"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"124"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"124"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"124"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"124"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"124"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"168"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"124"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"124"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},"C:\\Projects\\CvManager\\cv-manager\\src\\index.js",[],["255","256"],"C:\\Projects\\CvManager\\cv-manager\\src\\App.js",["257"],"import './App.css';\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Route, Switch } from 'react-router-dom';\nimport Nav from './components/Nav/Nav.js';\nimport CvPanel from './components/CvPanel/CvPanel.js';\nimport CoverPanel from './components/CoverPanel/CoverPanel.js';\nimport TemplatePanel from './components/TemplatePanel/TemplatePanel.js';\nimport SendMailPage from './components/SendMailPage/SendMailPage.js';\nimport HomePage from './components/HomePage/HomePage.js';\nimport SignUp from './components/SignUp/SignUp.js';\nimport Login from './components/Login/Login.js';\nimport { checkAuth } from './actions/userActions.js';\nimport PrivateRoute from './components/common/PrivateRoute.js';\n\nconst App = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(checkAuth());\n  }, []);\n\n  return (\n    <div className='app'>\n      <Nav />\n      <Switch>\n        <Route exact path='/' render={(routeParams) => <HomePage {...routeParams} />} />\n        <Route exact path='/signup' render={(routeParams) => <SignUp {...routeParams} />} />\n        <Route exact path='/login' render={(routeParams) => <Login {...routeParams} />} />\n        <PrivateRoute exact path='/cv' render={(routeParams) => <CvPanel {...routeParams} />} />\n        <PrivateRoute exact path='/cover' render={(routeParams) => <CoverPanel {...routeParams} />} />\n        <PrivateRoute exact path='/template' render={(routeParams) => <TemplatePanel {...routeParams} />} />\n        <PrivateRoute exact path='/email' render={(routeParams) => <SendMailPage {...routeParams} />} />\n      </Switch>\n    </div>\n  );\n};\n\nexport default App;\n","C:\\Projects\\CvManager\\cv-manager\\src\\utills\\menu.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\consts\\measures.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\components\\Nav\\Nav.js",["258","259"],"import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ProfileIcon from '@material-ui/icons/AccountCircle';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { getMenuItems } from '../../utills/menu.js';\r\nimport { SIDE_PANEL_WIDTH_WIDE, SIDE_PANEL_WIDTH_SHORT } from '../../consts/measures.js';\r\nimport { Link } from 'react-router-dom';\r\nimport { openSidePanel, closeSidePanel } from '../../actions/optionsActions.js';\r\nimport { logout } from '../../actions/userActions.js';\r\nimport { LIGHT, LIME } from '../../consts/colors.js';\r\nimport { showErrorOff } from '../../actions/optionsActions.js';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n\r\n  header: {\r\n    background: '#363795',\r\n    background: ' -webkit-linear-gradient(to right, #005c97, #363795)',\r\n    background: 'linear-gradient(to right, #005c97, #363795)',\r\n\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n  },\r\n\r\n  appBar: {\r\n    minHeight: '64px',\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n\r\n  appBarShift: {\r\n    marginLeft: SIDE_PANEL_WIDTH_WIDE,\r\n    width: `calc(100% - ${SIDE_PANEL_WIDTH_WIDE}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n\r\n  drawer: {\r\n    width: SIDE_PANEL_WIDTH_WIDE,\r\n    whiteSpace: 'nowrap',\r\n  },\r\n\r\n  drawerOpen: {\r\n    width: SIDE_PANEL_WIDTH_WIDE,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n\r\n  drawerClose: {\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    overflowX: 'hidden',\r\n    width: SIDE_PANEL_WIDTH_SHORT,\r\n    [theme.breakpoints.down('sm')]: {\r\n      width: 0,\r\n    },\r\n  },\r\n\r\n  toolbar: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: theme.spacing(0, 1),\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  profile: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n  loginContainer: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    cursor: 'default',\r\n  },\r\n  userName: {\r\n    margin: 0,\r\n    padding: 0,\r\n    paddingTop: '5px',\r\n    marginBottom: '-10px',\r\n    color: LIME,\r\n    fontSize: '13px',\r\n  },\r\n  profileIcon: {\r\n    '& svg': {\r\n      fontSize: '32px',\r\n      color: LIME,\r\n      transition: 'all 0.4s ease-in-out',\r\n    },\r\n  },\r\n  profileDisabled: {\r\n    '& svg': {\r\n      color: LIGHT,\r\n    },\r\n  },\r\n  actionButton: {\r\n    fontSize: '14px',\r\n    transition: 'all 0.2s ease-in-out',\r\n    '&:hover': {\r\n      color: LIME,\r\n    },\r\n  },\r\n  loginButton: {\r\n    '&:hover': {\r\n      textDecoration: 'overline',\r\n    },\r\n  },\r\n  signupButton: {\r\n    '&:hover': {\r\n      textDecoration: 'underline',\r\n    },\r\n  },\r\n  hide: {\r\n    visibility: 'hidden',\r\n  },\r\n  remove: {\r\n    display: 'none',\r\n  },\r\n}));\r\n\r\nconst Nav = (props) => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const open = useSelector((state) => state.options.isSidePanelOpen);\r\n  const [menuItems] = useState(getMenuItems());\r\n  const isLoggedIn = useSelector((state) => state.user.isLoggedIn);\r\n  const userEmail = useSelector((state) => state.user.user.firstName);\r\n\r\n  const handleDrawerOpen = () => {\r\n    dispatch(openSidePanel);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    dispatch(closeSidePanel);\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    dispatch(logout());\r\n  };\r\n\r\n  const handlePageChange = () => {\r\n    dispatch(showErrorOff);\r\n  };\r\n\r\n  const menuListItems = menuItems.map((item) => (\r\n    <ListItem button key={item.name} component={Link} to={item.to} onClick={handlePageChange}>\r\n      <ListItemIcon>{item.icon}</ListItemIcon>\r\n      <ListItemText primary={item.name} />\r\n    </ListItem>\r\n  ));\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position='fixed'\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: open,\r\n        })}\r\n      >\r\n        <Toolbar className={classes.header}>\r\n          <IconButton\r\n            color='inherit'\r\n            aria-label='open drawer'\r\n            onClick={handleDrawerOpen}\r\n            edge='start'\r\n            className={clsx(classes.menuButton, {\r\n              [classes.hide]: open,\r\n            })}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <div\r\n            className={clsx(classes.profile, {\r\n              [classes.remove]: open,\r\n            })}\r\n          >\r\n            <div\r\n              className={clsx({\r\n                [classes.hide]: isLoggedIn === null,\r\n              })}\r\n            >\r\n              {isLoggedIn ? (\r\n                <Button className={classes.actionButton} color='inherit' onClick={handleLogout}>\r\n                  Logout\r\n                </Button>\r\n              ) : (\r\n                <div>\r\n                  <Button\r\n                    className={clsx(classes.actionButton, classes.signupButton)}\r\n                    component={Link}\r\n                    to='/signup'\r\n                    color='inherit'\r\n                  >\r\n                    Sign up\r\n                  </Button>\r\n                  <Button\r\n                    className={clsx(classes.actionButton, classes.loginButton)}\r\n                    component={Link}\r\n                    to='/login'\r\n                    color='inherit'\r\n                  >\r\n                    Login\r\n                  </Button>\r\n                </div>\r\n              )}\r\n            </div>\r\n            <div className={classes.loginContainer}>\r\n              <p className={classes.userName}>{userEmail}</p>\r\n              <IconButton\r\n                classes={{ root: classes.profileIcon, disabled: classes.profileDisabled }}\r\n                disabled={!isLoggedIn}\r\n              >\r\n                <ProfileIcon />\r\n              </IconButton>\r\n            </div>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      <Drawer\r\n        variant='permanent'\r\n        className={clsx(classes.drawer, {\r\n          [classes.drawerOpen]: open,\r\n          [classes.drawerClose]: !open,\r\n        })}\r\n        classes={{\r\n          paper: clsx({\r\n            [classes.drawerOpen]: open,\r\n            [classes.drawerClose]: !open,\r\n          }),\r\n        }}\r\n      >\r\n        <div className={classes.toolbar}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            <ChevronLeftIcon />\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>{menuListItems}</List>\r\n        <Divider />\r\n      </Drawer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","C:\\Projects\\CvManager\\cv-manager\\src\\components\\CvPanel\\CvPanel.js",["260","261","262"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\r\nimport { addNewCv, getAllCvs, deleteMyCv, editMyCv } from '../../actions/cvActions.js';\r\nimport { showErrorOff } from '../../actions/optionsActions.js';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport Container from '@material-ui/core/Container';\r\nimport clsx from 'clsx';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport CvForm from './CvForm.js';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MyButton from '../common/MyButton.js';\r\nimport styles from '../../styles/panelStyle.js';\r\nimport DocListItem from '../common/DocListItem.js';\r\nimport ConfirmDialog from '../common/ConfirmDialog.js';\r\nimport { DELETE, EDIT, OPEN, EDIT_MODE, NEW_MODE } from '../../consts/strings.js';\r\nimport Alert from '../common/Alert.js';\r\n\r\nconst CvPanel = ({ classes }) => {\r\n  const dispatch = useDispatch();\r\n  const topRef = useRef(null);\r\n  const bottomRef = useRef(null);\r\n  const items = useSelector((state) => [...state.cv.items], shallowEqual);\r\n  const isSidePanelOpen = useSelector((state) => state.options.isSidePanelOpen);\r\n  const isLoading = useSelector((state) => state.options.isLoading);\r\n  const requestError = useSelector((state) => state.cv.error);\r\n  const showError = useSelector((state) => state.options.showError);\r\n  const successResponse = useSelector((state) => state.cv.responseStatusSuccess);\r\n  const [showSnackbar, setShowSnackbar] = useState(false);\r\n  const [isEditMode, setIsEditMode] = useState(false);\r\n  const [editItem, setEditItem] = useState(null);\r\n  const [openForm, setOpenForm] = useState(false);\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [deleteId, setDeleteId] = useState(0);\r\n\r\n  const saveNewCv = async (name, description, file) => {\r\n    //save edited instance\r\n    if (isEditMode) {\r\n      dispatch(editMyCv({ id: editItem.id, name: name, description: description, file: file }));\r\n    }\r\n    //save new instance\r\n    else dispatch(addNewCv({ name: name, description: description, file: file }));\r\n  };\r\n\r\n  const deleteCv = (id) => {\r\n    setDeleteId(id);\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleDialogOk = () => {\r\n    dispatch(deleteMyCv(deleteId));\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  const handleDialogCancel = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  const openFormHandler = () => {\r\n    setOpenForm(true);\r\n  };\r\n\r\n  const closeFormHandler = () => {\r\n    setOpenForm(false);\r\n    setIsEditMode(false);\r\n    setOpenForm(false);\r\n    setEditItem(null);\r\n    // scrollTo(topRef);\r\n  };\r\n\r\n  const editCv = (id) => {\r\n    const item = items.find((item) => item.id === id);\r\n    setEditItem(item);\r\n    setIsEditMode(true);\r\n    setOpenForm(true);\r\n    scrollTo(bottomRef);\r\n  };\r\n\r\n  const handleCloseSnackbar = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setShowSnackbar(false);\r\n  };\r\n\r\n  const scrollTo = (scrollRef) => {\r\n    scrollRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getAllCvs());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isEditMode) {\r\n      if (requestError.message === '') {\r\n        setIsEditMode(false);\r\n        setOpenForm(false);\r\n        setEditItem(null);\r\n        scrollTo(topRef);\r\n      }\r\n    }\r\n  }, [requestError]);\r\n\r\n  useEffect(() => {\r\n    if (!successResponse && showError && !showSnackbar) setShowSnackbar(true);\r\n    dispatch(showErrorOff);\r\n  }, [showError]);\r\n\r\n  const cvItems = items.map((cv) => (\r\n    <DocListItem\r\n      key={cv.id}\r\n      id={cv.id}\r\n      name={cv.name}\r\n      description={cv.description}\r\n      type={cv.type}\r\n      file={cv.file}\r\n      actions={[DELETE, EDIT, OPEN]}\r\n      onEdit={editCv}\r\n      onDelete={deleteCv}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <div\r\n      className={clsx(classes.root, {\r\n        [classes.expanded]: isSidePanelOpen,\r\n      })}\r\n    >\r\n      <Container>\r\n        <List ref={topRef}>{cvItems}</List>\r\n        <div className={clsx(classes.loading, { [classes.hide]: !isLoading })}>\r\n          <CircularProgress />\r\n        </div>\r\n        <div className={classes.addButtonContainer}>\r\n          {!openForm && <MyButton name='Add cv' theme='light' onClick={openFormHandler} />}\r\n        </div>\r\n        {openForm && (\r\n          <CvForm\r\n            initName={editItem ? editItem.name : ''}\r\n            initDescription={editItem ? editItem.description : ''}\r\n            initFile={editItem ? editItem.file : ''}\r\n            mode={isEditMode ? EDIT_MODE : NEW_MODE}\r\n            saveCv={saveNewCv}\r\n            closeForm={closeFormHandler}\r\n          />\r\n        )}\r\n        <div style={{ height: openForm ? 0 : '250px' }} ref={bottomRef}></div>\r\n      </Container>\r\n      <Snackbar\r\n        className={classes.snackbar}\r\n        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}\r\n        open={showSnackbar}\r\n        autoHideDuration={3500}\r\n        disableWindowBlurListener={true}\r\n        onClose={handleCloseSnackbar}\r\n      >\r\n        <Alert onClose={handleCloseSnackbar} severity='error'>\r\n          {requestError.message}\r\n        </Alert>\r\n      </Snackbar>\r\n      <ConfirmDialog\r\n        open={openDialog}\r\n        dialogTitle='Delete CV?'\r\n        dialogText='Removing CV also will remove templates that use current CV item.'\r\n        handleOk={handleDialogOk}\r\n        handleClose={handleDialogCancel}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles, { withTheme: true })(CvPanel);\r\n","C:\\Projects\\CvManager\\cv-manager\\src\\components\\CoverPanel\\CoverPanel.js",["263","264","265"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Cover from './Cover/Cover.js';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { addNewCover, getAllCovers, deleteMyCover, editMyCover } from '../../actions/coverActions.js';\r\nimport { showErrorOff } from '../../actions/optionsActions.js';\r\nimport Container from '@material-ui/core/Container';\r\nimport MyButton from '../common/MyButton.js';\r\nimport clsx from 'clsx';\r\nimport CoverForm from './CoverForm.js';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport styles from '../../styles/panelStyle.js';\r\nimport ConfirmDialog from '../common/ConfirmDialog.js';\r\nimport { LTR, EDIT_MODE, NEW_MODE } from '../../consts/strings.js';\r\nimport Alert from '../common/Alert.js';\r\n\r\nconst CoverPanel = ({ classes }) => {\r\n  const dispatch = useDispatch();\r\n  const topRef = useRef(null);\r\n  const bottomRef = useRef(null);\r\n  const items = useSelector((state) => state.cover.items);\r\n  const isSidePanelOpen = useSelector((state) => state.options.isSidePanelOpen);\r\n  const isLoading = useSelector((state) => state.options.isLoading);\r\n  const requestError = useSelector((state) => state.cover.error);\r\n  const showError = useSelector((state) => state.options.showError);\r\n  const successResponse = useSelector((state) => state.cover.responseStatusSuccess);\r\n  const [showSnackbar, setShowSnackbar] = useState(false);\r\n  const [openForm, setOpenForm] = useState(false);\r\n  const [coverExpanded, setCoverExpanded] = useState('');\r\n  const [isEditMode, setIsEditMode] = useState(false);\r\n  const [editItem, setEditItem] = useState(null);\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [deleteId, setDeleteId] = useState(0);\r\n\r\n  const handleChange = (id) => (event, newExpanded) => {\r\n    setCoverExpanded(newExpanded ? id : null);\r\n  };\r\n\r\n  const openFormHandler = () => {\r\n    setOpenForm(true);\r\n  };\r\n\r\n  const closeFormHandler = () => {\r\n    setOpenForm(false);\r\n    setIsEditMode(false);\r\n    setOpenForm(false);\r\n    setEditItem(null);\r\n  };\r\n\r\n  const saveCover = async (name, content, direction) => {\r\n    if (isEditMode) {\r\n      dispatch(editMyCover({ id: editItem.id, name: name, content: content, direction: direction }));\r\n    } else dispatch(addNewCover({ name: name, content: content, direction: direction }));\r\n  };\r\n\r\n  const deleteCover = (id) => {\r\n    setDeleteId(id);\r\n    setOpenDialog(true);\r\n    // dispatch(deleteMyCover(id));\r\n  };\r\n\r\n  const handleDialogOk = () => {\r\n    dispatch(deleteMyCover(deleteId));\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  const handleDialogCancel = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  const editCover = (id, name, content, direction) => {\r\n    setEditItem({ id: id, name: name, content: content, direction: direction });\r\n    setIsEditMode(true);\r\n    setOpenForm(true);\r\n    scrollTo(bottomRef);\r\n  };\r\n\r\n  const handleCloseSnackbar = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setShowSnackbar(false);\r\n  };\r\n\r\n  const scrollTo = (scrollRef) => {\r\n    scrollRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getAllCovers());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isEditMode) {\r\n      if (requestError.message === '') {\r\n        setIsEditMode(false);\r\n        setOpenForm(false);\r\n        setEditItem(null);\r\n        scrollTo(topRef);\r\n      }\r\n    }\r\n  }, [requestError]);\r\n\r\n  useEffect(() => {\r\n    if (!successResponse && showError && !showSnackbar) setShowSnackbar(true);\r\n    dispatch(showErrorOff);\r\n  }, [showError]);\r\n\r\n  let covers = items.map((cover) => (\r\n    <Cover\r\n      key={cover.id}\r\n      id={cover.id}\r\n      name={cover.name}\r\n      content={cover.content}\r\n      direction={cover.direction}\r\n      expanded={coverExpanded}\r\n      deleteCover={deleteCover}\r\n      editCover={editCover}\r\n      handleChange={handleChange}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <div\r\n      className={clsx(classes.root, {\r\n        [classes.expanded]: isSidePanelOpen,\r\n      })}\r\n    >\r\n      <Container maxWidth='lg'>\r\n        <div ref={topRef}>{covers}</div>\r\n        <div className={clsx(classes.loading, { [classes.hide]: !isLoading })}>\r\n          <CircularProgress />\r\n        </div>\r\n        <div className={classes.addButtonContainer}>\r\n          {!openForm && <MyButton name='Add cover' theme='light' onClick={openFormHandler} />}\r\n        </div>\r\n        {openForm && (\r\n          <CoverForm\r\n            initName={editItem ? editItem.name : ''}\r\n            initContent={editItem ? editItem.content : ''}\r\n            initDirection={editItem ? editItem.direction : LTR}\r\n            mode={isEditMode ? EDIT_MODE : NEW_MODE}\r\n            saveCover={saveCover}\r\n            closeForm={closeFormHandler}\r\n          />\r\n        )}\r\n        <div style={{ height: openForm ? 0 : '250px' }} ref={bottomRef}></div>\r\n      </Container>\r\n      <Snackbar\r\n        className={classes.snackbar}\r\n        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}\r\n        open={showSnackbar}\r\n        autoHideDuration={5000}\r\n        onClose={handleCloseSnackbar}\r\n      >\r\n        <Alert onClose={handleCloseSnackbar} severity={'error'}>\r\n          {requestError.message}\r\n        </Alert>\r\n      </Snackbar>\r\n      <ConfirmDialog\r\n        open={openDialog}\r\n        dialogTitle='Delete Cover?'\r\n        dialogText='Removing Cover also will remove templates that use current cover item.'\r\n        handleOk={handleDialogOk}\r\n        handleClose={handleDialogCancel}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles, { withTheme: true })(CoverPanel);\r\n","C:\\Projects\\CvManager\\cv-manager\\src\\components\\CoverPanel\\Cover\\Cover.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\components\\TemplatePanel\\TemplatePanel.js",["266","267","268"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport MyButton from '../common/MyButton.js';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport List from '@material-ui/core/List';\r\nimport { getAllMyTemplates, editMyTemplate, addNewTemplate, deleteMyTemplate } from '../../actions/templateActions.js';\r\nimport clsx from 'clsx';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport panelStyle from '../../styles/panelStyle.js';\r\nimport TemplateForm from './TemplateForm.js';\r\nimport DocListItem from '../common/DocListItem.js';\r\nimport ConfirmDialog from '../common/ConfirmDialog.js';\r\nimport { EDIT, DELETE, EDIT_MODE, NEW_MODE } from '../../consts/strings.js';\r\nimport Alert from '../common/Alert.js';\r\nimport { showErrorOff } from '../../actions/optionsActions.js';\r\n\r\nconst TemplatePanel = ({ classes }) => {\r\n  const dispatch = useDispatch();\r\n  const topRef = useRef(null);\r\n  const bottomRef = useRef(null);\r\n  const isSidePanelOpen = useSelector((state) => state.options.isSidePanelOpen);\r\n  const isLoading = useSelector((state) => state.options.isLoading);\r\n  const requestError = useSelector((state) => state.template.error);\r\n  // const showError = useSelector((state) => state.options.showError);\r\n  // const successResponse = useSelector((state) => state.template.responseStatusSuccess);\r\n  const [showSnackbar, setShowSnackbar] = useState(false);\r\n  const items = useSelector((state) => state.template.items);\r\n  const [isEditMode, setIsEditMode] = useState(false);\r\n  const [editItem, setEditItem] = useState(null);\r\n  const [openForm, setOpenForm] = useState(false);\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [deleteId, setDeleteId] = useState(0);\r\n\r\n  const openFormHandler = (e) => {\r\n    setOpenForm(true);\r\n  };\r\n\r\n  const saveTemplate = async (name, description, cv, cover) => {\r\n    if (isEditMode) {\r\n      dispatch(editMyTemplate({ id: editItem.id, name: name, description: description, cv: cv, cover: cover }));\r\n    } else dispatch(addNewTemplate({ name: name, description: description, cv: cv, cover: cover }));\r\n  };\r\n\r\n  const deleteTemplate = (id) => {\r\n    setDeleteId(id);\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleDialogOk = () => {\r\n    dispatch(deleteMyTemplate(deleteId));\r\n  };\r\n\r\n  const handleDialogCancel = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  const closeFormHandler = (e) => {\r\n    setOpenForm(false);\r\n    resetFormInput();\r\n    scrollTo(topRef);\r\n  };\r\n\r\n  const editTemplate = (id) => {\r\n    const item = items.find((item) => item.id === id);\r\n    setEditItem(item);\r\n    setIsEditMode(true);\r\n    setOpenForm(true);\r\n    scrollTo(bottomRef);\r\n  };\r\n\r\n  const resetFormInput = () => {\r\n    setIsEditMode(false);\r\n    setEditItem(null);\r\n  };\r\n\r\n  const handleCloseSnackbar = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setShowSnackbar(false);\r\n  };\r\n\r\n  const scrollTo = (scrollRef) => {\r\n    scrollRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getAllMyTemplates());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isEditMode) {\r\n      if (requestError.message === '') {\r\n        setIsEditMode(false);\r\n        setOpenForm(false);\r\n        setEditItem(null);\r\n        scrollTo(topRef);\r\n      }\r\n    }\r\n  }, [requestError]);\r\n\r\n  useEffect(() => {\r\n    if (openForm) scrollTo(bottomRef);\r\n    else scrollTo(topRef);\r\n  }, [openForm]);\r\n\r\n  const templateItems = items.map((template) => (\r\n    <DocListItem\r\n      key={template.id}\r\n      id={template.id}\r\n      name={template.name}\r\n      description={template.description}\r\n      actions={[DELETE, EDIT]}\r\n      onEdit={editTemplate}\r\n      onDelete={deleteTemplate}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <div\r\n      className={clsx(classes.root, {\r\n        [classes.expanded]: isSidePanelOpen,\r\n      })}\r\n    >\r\n      <Container>\r\n        <List ref={topRef}>{templateItems}</List>\r\n        <div className={clsx(classes.loading, { [classes.hide]: !isLoading })}>\r\n          <CircularProgress />\r\n        </div>\r\n        <div className={classes.addButtonContainer}>\r\n          {!openForm && <MyButton name='Add template' theme='light' onClick={openFormHandler} />}\r\n        </div>\r\n        {openForm && (\r\n          <TemplateForm\r\n            mode={isEditMode ? EDIT_MODE : NEW_MODE}\r\n            initName={editItem ? editItem.name : ''}\r\n            initDescription={editItem ? editItem.description : ''}\r\n            initCvId={editItem ? editItem.cv : ''}\r\n            initCoverId={editItem ? editItem.cover : ''}\r\n            saveTemplate={saveTemplate}\r\n            closeForm={closeFormHandler}\r\n          />\r\n        )}\r\n        <div style={{ height: openForm ? 0 : '250px' }} ref={bottomRef}></div>\r\n      </Container>\r\n      <Snackbar\r\n        className={classes.snackbar}\r\n        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}\r\n        open={showSnackbar}\r\n        autoHideDuration={3500}\r\n        onClose={handleCloseSnackbar}\r\n      >\r\n        <Alert onClose={handleCloseSnackbar} severity={'error'}>\r\n          {requestError.message}\r\n        </Alert>\r\n      </Snackbar>\r\n      <ConfirmDialog\r\n        open={openDialog}\r\n        dialogTitle='Delete Template?'\r\n        dialogText='Template will not be available more'\r\n        handleOk={handleDialogOk}\r\n        handleClose={handleDialogCancel}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withStyles(panelStyle, { withTheme: true })(TemplatePanel);\r\n","C:\\Projects\\CvManager\\cv-manager\\src\\actions\\cvActions.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\consts\\actionTypes.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\api\\api.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\Store.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\reducers\\coverReducer.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\reducers\\templateReducer.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\reducers\\cvReducer.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\actions\\coverActions.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\consts\\colors.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\MyButton.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\DocViewer.js",[],["269","270"],"C:\\Projects\\CvManager\\cv-manager\\src\\actions\\optionsActions.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\reducers\\optionsReducer.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\styles\\panelStyle.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\components\\TemplatePanel\\TemplateForm.js",["271","272"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport * as yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useForm, FormProvider } from 'react-hook-form';\r\nimport MyButton from '../common/MyButton.js';\r\nimport FormSelect from '../common/FormSelect.js';\r\nimport FormInput from '../common/FormInput.js';\r\nimport { getAllCvs } from '../../actions/cvActions.js';\r\nimport { getAllCovers } from '../../actions/coverActions.js';\r\nimport { MAX_NAME_LENGTH, MAX_DESCRIPTION_LENGTH } from '../../consts/measures.js';\r\nimport FormTitle from '../common/FormTitle.js';\r\nimport formStyle from '../../styles/formStyle.js';\r\nimport ConfirmDialog from '../common/ConfirmDialog.js';\r\nimport { NEW_MODE } from '../../consts/strings.js';\r\n\r\nconst schema = yup.object().shape({\r\n  name: yup\r\n    .string()\r\n    .required('Name is required field')\r\n    .test('len', `Must be less than ${MAX_NAME_LENGTH} characters`, (val) => val.length <= MAX_NAME_LENGTH),\r\n  description: yup\r\n    .string()\r\n    .test(\r\n      'len',\r\n      `Must be less than ${MAX_DESCRIPTION_LENGTH} characters`,\r\n      (val) => val.length <= MAX_DESCRIPTION_LENGTH\r\n    ),\r\n  cvSelect: yup.string().required('Please select cv'),\r\n  coverSelect: yup.string().required('Please select cover'),\r\n});\r\n\r\nconst TemplateForm = ({\r\n  initName = '',\r\n  initDescription = '',\r\n  initCvId = '',\r\n  initCoverId = '',\r\n  mode = NEW_MODE,\r\n  saveTemplate,\r\n  closeForm,\r\n  classes,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const [data, setData] = useState(null);\r\n  const cvList = useSelector((state) => state.cv.items.map((item) => ({ id: item.id, name: item.name })));\r\n  const coverList = useSelector((state) => state.cover.items.map((item) => ({ id: item.id, name: item.name })));\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n\r\n  const formObject = useForm({\r\n    mode: 'all',\r\n    resolver: yupResolver(schema),\r\n  });\r\n\r\n  const { handleSubmit, reset, errors, clearErrors } = formObject;\r\n\r\n  const onSubmit = (formData) => {\r\n    if (mode === NEW_MODE) {\r\n      saveTemplate(formData.name, formData.description, formData.cvSelect, formData.coverSelect);\r\n      return;\r\n    }\r\n    setData({\r\n      name: formData.name,\r\n      description: formData.description,\r\n      cv: formData.cvSelect,\r\n      cover: formData.coverSelect,\r\n    });\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleDialogOk = () => {\r\n    saveTemplate(data.name, data.description, data.cv, data.cover);\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  const handleDialogCancel = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    reset({ name: '', description: '', cvSelect: '', coverSelect: '' });\r\n    clearErrors();\r\n  };\r\n\r\n  const handleClose = () => {\r\n    closeForm();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (cvList.length === 0) dispatch(getAllCvs());\r\n    if (coverList.length === 0) dispatch(getAllCovers());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    reset({ name: initName, description: initDescription, cvSelect: initCvId, coverSelect: initCoverId });\r\n  }, [initName, initCvId, initDescription, initCoverId]);\r\n\r\n  return (\r\n    <FormProvider {...formObject}>\r\n      <form className={classes.root} onSubmit={handleSubmit(onSubmit)} onReset={handleReset}>\r\n        <FormTitle mode={mode} label='template' handleClose={handleClose} />\r\n        <FormInput name='name' label='Name' required={true} defaultValue={initName} errorobj={errors} />\r\n        <FormInput\r\n          name='description'\r\n          label='Description'\r\n          defaultValue={initDescription}\r\n          required={false}\r\n          errorobj={errors}\r\n        />\r\n        <FormSelect\r\n          name='cvSelect'\r\n          label='Cv'\r\n          options={cvList}\r\n          defaultValue={initCvId}\r\n          required={true}\r\n          errorobj={errors}\r\n        />\r\n        <FormSelect\r\n          name='coverSelect'\r\n          label='Cover'\r\n          options={coverList}\r\n          defaultValue={initCoverId}\r\n          required={true}\r\n          errorobj={errors}\r\n        />\r\n        <div className={classes.submitContainer}>\r\n          <MyButton name='Save' theme='dark' type='submit' />\r\n          <MyButton name='Reset' theme='dark' type='reset' />\r\n        </div>\r\n      </form>\r\n      <ConfirmDialog\r\n        open={openDialog}\r\n        dialogTitle='Update template?'\r\n        dialogText='All previus data will be updated'\r\n        handleOk={handleDialogOk}\r\n        handleClose={handleDialogCancel}\r\n      />\r\n    </FormProvider>\r\n  );\r\n};\r\n\r\nexport default withStyles(formStyle)(TemplateForm);\r\n","C:\\Projects\\CvManager\\cv-manager\\src\\actions\\templateActions.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\FormSelect.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\FormInput.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\components\\CvPanel\\CvForm.js",["273"],"import React, { useState, useEffect } from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport * as yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useForm, FormProvider } from 'react-hook-form';\r\nimport MyButton from '../common/MyButton.js';\r\nimport FormInput from '../common/FormInput.js';\r\nimport { MAX_NAME_LENGTH, MAX_DESCRIPTION_LENGTH } from '../../consts/measures.js';\r\nimport { FILE_FORMATS } from '../../consts/structs.js';\r\nimport FormTitle from '../common/FormTitle.js';\r\nimport FormFileInput from '../common/FormFileInput.js';\r\nimport formStyle from '../../styles/formStyle.js';\r\nimport ConfirmDialog from '../common/ConfirmDialog.js';\r\nimport { NEW_MODE } from '../../consts/strings.js';\r\n\r\nconst newModeSchema = yup.object().shape({\r\n  name: yup\r\n    .string()\r\n    .required('Name is required field')\r\n    .test('len', `Must be less than ${MAX_NAME_LENGTH} characters`, (val) => val.length <= MAX_NAME_LENGTH),\r\n  description: yup\r\n    .string()\r\n    .test(\r\n      'len',\r\n      `Must be less than ${MAX_DESCRIPTION_LENGTH} characters`,\r\n      (val) => val.length <= MAX_DESCRIPTION_LENGTH\r\n    ),\r\n  cvFile: yup\r\n    .mixed()\r\n\r\n    .test('fileSelected', 'File is required', (value) => {\r\n      return value && value.length > 0;\r\n    })\r\n    .test('fileSize', 'File is too large', (value) => {\r\n      return value.length === 0 || (value.length > 0 && value[0].size < 3000000);\r\n    })\r\n    .test('type', 'Only doc, docx, pdf format supported', (value) => {\r\n      return value.length === 0 || (value.length > 0 && FILE_FORMATS.includes(value[0].type));\r\n    }),\r\n});\r\n\r\nconst editModeSchema = yup.object().shape({\r\n  name: yup\r\n    .string()\r\n    .required('Name is required field')\r\n    .test('len', `Must be less than ${MAX_NAME_LENGTH} characters`, (val) => val.length <= MAX_NAME_LENGTH),\r\n  description: yup\r\n    .string()\r\n    .test(\r\n      'len',\r\n      `Must be less than ${MAX_DESCRIPTION_LENGTH} characters`,\r\n      (val) => val.length <= MAX_DESCRIPTION_LENGTH\r\n    ),\r\n  cvFile: yup\r\n    .mixed()\r\n    .test('fileSize', 'File is too large', (value) => {\r\n      return value.length === 0 || (value.length > 0 && value[0].size < 3000000);\r\n    })\r\n    .test('type', 'Only doc, docx, pdf format supported', (value) => {\r\n      return value.length === 0 || (value.length > 0 && FILE_FORMATS.includes(value[0].type));\r\n    }),\r\n});\r\n\r\nconst CvForm = ({ initName = '', initDescription = '', initFile = null, mode = 'new', saveCv, closeForm, classes }) => {\r\n  const [data, setData] = useState(null);\r\n  const [isAfterReset, setIsAfterReset] = useState(false);\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n\r\n  const formObject = useForm({\r\n    defaultValues: {\r\n      cvFile: null,\r\n    },\r\n    mode: 'all',\r\n    resolver: yupResolver(mode === NEW_MODE ? newModeSchema : editModeSchema),\r\n  });\r\n\r\n  const { handleSubmit, reset, watch, errors, clearErrors } = formObject;\r\n\r\n  const file = watch('cvFile');\r\n\r\n  const onSubmit = (data) => {\r\n    if (mode === NEW_MODE) {\r\n      if (data.cvFile.length > 0) saveCv(data.name, data.description, data.cvFile[0]);\r\n      else saveCv(data.name, data.description, initFile);\r\n      return;\r\n    }\r\n    setData(data);\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleDialogOk = () => {\r\n    //new File choosed\r\n    if (data.cvFile.length > 0) saveCv(data.name, data.description, data.cvFile[0]);\r\n    //edit instance with same file\r\n    else saveCv(data.name, data.description, initFile);\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  const handleDialogCancel = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    closeForm();\r\n  };\r\n\r\n  const handleReset = () => {\r\n    reset({ name: '', description: '', cvFile: null });\r\n    clearErrors();\r\n    setIsAfterReset(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    reset({ name: initName, description: initDescription, cvFile: null });\r\n    setIsAfterReset(false);\r\n  }, [initFile]);\r\n\r\n  return (\r\n    <FormProvider {...formObject}>\r\n      <form className={classes.root} onSubmit={handleSubmit(onSubmit)} onReset={handleReset}>\r\n        <FormTitle mode={mode} label='CV' handleClose={handleClose} />\r\n        <FormInput name='name' label='Name' required={true} defaultValue={initName} errorobj={errors} />\r\n        <FormInput\r\n          name='description'\r\n          label='Description'\r\n          defaultValue={initDescription}\r\n          required={false}\r\n          errorobj={errors}\r\n        />\r\n        {/* <FormFileInput name='cvFile' errors={errors} initFile={initFile} /> */}\r\n        <FormFileInput\r\n          name='cvFile'\r\n          errors={errors}\r\n          isSelected={(file && file.length > 0) || (initFile && !isAfterReset)}\r\n        />\r\n        <div className={classes.submitContainer}>\r\n          <MyButton name='Save' theme='dark' type='submit' />\r\n          <MyButton name='Reset' theme='dark' type='reset' />\r\n        </div>\r\n      </form>\r\n      <ConfirmDialog\r\n        open={openDialog}\r\n        dialogTitle='Update CV?'\r\n        dialogText='All previous data will be updated'\r\n        handleOk={handleDialogOk}\r\n        handleClose={handleDialogCancel}\r\n      />\r\n    </FormProvider>\r\n  );\r\n};\r\n\r\nexport default withStyles(formStyle)(CvForm);\r\n","C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\FileInput.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\consts\\structs.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\FormTitle.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\FormFileInput.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\components\\CoverPanel\\CoverForm.js",["274","275"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport * as yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useForm, FormProvider } from 'react-hook-form';\r\nimport MyButton from '../common/MyButton.js';\r\nimport { FormInput } from '../common/FormInput.js';\r\nimport { MAX_NAME_LENGTH } from '../../consts/measures.js';\r\nimport FormTitle from '../common/FormTitle.js';\r\nimport formStyle from '../../styles/formStyle.js';\r\nimport { EditorState } from 'draft-js';\r\nimport { RichTextEditor } from '../common/RichTextEditor.js';\r\nimport { convertJsonToEditorContent, convertEditorContentToJson } from '../../utills/editorUtils.js';\r\nimport ConfirmDialog from '../common/ConfirmDialog.js';\r\nimport BiSwitch from '../common/BiSwitch.js';\r\nimport { RTL, LTR, NEW_MODE } from '../../consts/strings.js';\r\n\r\nconst schema = yup.object().shape({\r\n  name: yup\r\n    .string()\r\n    .required('Name is required field')\r\n    .test('len', `Must be less than ${MAX_NAME_LENGTH} characters`, (val) => val.length <= MAX_NAME_LENGTH),\r\n});\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  editor: {\r\n    width: '100%',\r\n  },\r\n  directionSwitch: {\r\n    display: 'flex',\r\n    justifyContent: 'flex-end',\r\n    alignItems: 'center',\r\n  },\r\n  directionSwitchLabel: {\r\n    padding: '5px',\r\n    color: 'white',\r\n  },\r\n}));\r\n\r\nconst CoverForm = ({\r\n  initName = '',\r\n  initContent = '',\r\n  initDirection = LTR,\r\n  mode = NEW_MODE,\r\n  saveCover,\r\n  closeForm,\r\n  classes,\r\n}) => {\r\n  const myClasses = useStyles();\r\n\r\n  const [data, setData] = useState(null);\r\n  const [initEditorContent, setInitEditorContent] = useState('');\r\n  const [content, setContent] = useState('');\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [textDirectionLtr, setTextDirectionLtr] = useState(true);\r\n\r\n  const formObject = useForm({\r\n    mode: 'all',\r\n    resolver: yupResolver(schema),\r\n  });\r\n\r\n  const { handleSubmit, reset, errors, clearErrors } = formObject;\r\n\r\n  const onSubmit = (formData) => {\r\n    if (mode === NEW_MODE) {\r\n      saveCover(formData.name, convertEditorContentToJson(content), textDirectionLtr ? LTR : RTL);\r\n      return;\r\n    }\r\n    setData({\r\n      name: formData.name,\r\n      content: convertEditorContentToJson(content),\r\n      direction: textDirectionLtr ? LTR : RTL,\r\n    });\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    closeForm();\r\n  };\r\n\r\n  const handleDialogOk = () => {\r\n    saveCover(data.name, data.content, data.direction);\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  const handleDialogCancel = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    reset({ name: '' });\r\n    clearErrors();\r\n    setTextDirectionLtr(true);\r\n    setInitEditorContent(EditorState.createEmpty().getCurrentContent());\r\n  };\r\n\r\n  const handleChangeDirection = () => {\r\n    setTextDirectionLtr(!textDirectionLtr);\r\n  };\r\n\r\n  const onContentChanged = (newContent) => {\r\n    setContent(newContent);\r\n  };\r\n\r\n  useEffect(() => {\r\n    reset({ name: initName });\r\n  }, [initName]);\r\n\r\n  useEffect(() => {\r\n    if (initContent !== '') {\r\n      setInitEditorContent(convertJsonToEditorContent(initContent));\r\n    }\r\n  }, [initContent]);\r\n\r\n  useEffect(() => {\r\n    setTextDirectionLtr(initDirection === LTR);\r\n  }, [initDirection]);\r\n\r\n  useEffect(() => {\r\n    setContent(initEditorContent);\r\n  }, [initEditorContent]);\r\n\r\n  return (\r\n    <FormProvider {...formObject}>\r\n      <form className={classes.root} onSubmit={handleSubmit(onSubmit)} onReset={handleReset}>\r\n        <FormTitle mode={mode} label='cover' handleClose={handleClose} />\r\n        {/* <FormInputUnControlled name='name' required={true} label='Name' onChange={onNameChange} value={name} /> */}\r\n        <FormInput name='name' label='Name' required={true} defaultValue={initName} errorobj={errors} />\r\n        <div className={myClasses.editor}>\r\n          <RichTextEditor\r\n            initContent={initEditorContent}\r\n            direction={textDirectionLtr ? LTR : RTL}\r\n            onContentChange={onContentChanged}\r\n          />\r\n          <BiSwitch\r\n            classes={{ root: myClasses.directionSwitch, label: myClasses.directionSwitchLabel }}\r\n            labelLeft={LTR}\r\n            labelRight={RTL}\r\n            checked={textDirectionLtr}\r\n            handleChange={handleChangeDirection}\r\n          />\r\n        </div>\r\n\r\n        <div className={classes.submitContainer}>\r\n          <MyButton name='Save' theme='dark' type='submit' />\r\n          <MyButton name='Reset' theme='dark' type='reset' />\r\n        </div>\r\n      </form>\r\n      <ConfirmDialog\r\n        open={openDialog}\r\n        dialogTitle='Update cover?'\r\n        dialogText='All previous data will be updated'\r\n        handleOk={handleDialogOk}\r\n        handleClose={handleDialogCancel}\r\n      />\r\n    </FormProvider>\r\n  );\r\n};\r\n\r\nexport default withStyles(formStyle)(CoverForm);\r\n","C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\DocListItem.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\styles\\formStyle.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\components\\SendMailPage\\SendMailPage.js",["276","277","278","279","280","281"],"C:\\Projects\\CvManager\\cv-manager\\src\\components\\SendMailPage\\SendForm.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\RichTextEditor.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\reducers\\userReducer.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\utills\\editorUtils.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\utills\\html.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\MyCheckBox.js",["282","283","284","285","286","287","288","289"],"import React, { useState, useEffect } from 'react';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { LIGHT_BLUE, DARK_BLUE, LIGHT, DARK, RED_ERROR, LIME } from '../../consts/colors.js';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'flex-end',\r\n    margin: 0,\r\n    padding: 0,\r\n    '& .MuiFormControlLabel-root': {\r\n      '& .MuiCheckbox-root': {\r\n        color: 'white',\r\n        '& svg': {\r\n          fontSize: '32px',\r\n        },\r\n      },\r\n    },\r\n    '& span': {\r\n      color: 'white',\r\n      fontSize: '20px',\r\n    },\r\n  },\r\n}));\r\n\r\nexport const MyCheckBox = ({ label, name, value = false, handleChange }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <FormControl className={classes.root} name={name}>\r\n      <FormControlLabel\r\n        value='edit'\r\n        control={<Checkbox checked={value} onChange={handleChange} />}\r\n        label={label}\r\n        labelPlacement='start'\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default MyCheckBox;\r\n","C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\MyToolTip.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\MySwitch.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\components\\HomePage\\HomePage.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\HorizontalCard.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\reducers\\emailReducer.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\actions\\emailActions.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\components\\SignUp\\SignUp.js",["290","291"],"import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { Link } from 'react-router-dom';\r\nimport MuiLink from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport * as yup from 'yup';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport clsx from 'clsx';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useForm, FormProvider } from 'react-hook-form';\r\nimport { FormInput } from '../common/FormInputLogin.js';\r\nimport { RED_ERROR, LIGHT_BLUE } from '../../consts/colors.js';\r\nimport { HEADER_MARGIN, SIDE_PANEL_WIDTH_SHORT } from '../../consts/measures.js';\r\nimport { signup } from '../../actions/userActions.js';\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant='body2' color='textSecondary' align='center'>\r\n      {'Copyright © '}\r\n      <MuiLink color='inherit' href='http://18.193.76.149/'>\r\n        Stas Tarasenko\r\n      </MuiLink>\r\n      &nbsp;\r\n      {new Date().getFullYear()}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    background: 'white',\r\n    marginTop: HEADER_MARGIN,\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    //width: '100%',\r\n    marginTop: theme.spacing(3),\r\n    '& a': {\r\n      textDecoration: 'none',\r\n    },\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  errorMessage: {\r\n    margin: 0,\r\n    marginTop: '-10px',\r\n    padding: 0,\r\n    fontSize: '17px',\r\n    color: RED_ERROR,\r\n  },\r\n  loading: {\r\n    textAlign: 'center',\r\n    '& svg': {\r\n      color: LIGHT_BLUE,\r\n    },\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n    // visibility: 'hidden',\r\n  },\r\n}));\r\n\r\nconst schema = yup.object().shape({\r\n  firstName: yup\r\n    .string()\r\n    .required('Required field')\r\n    .test('len', `Must be less than 20 characters`, (val) => val.length <= 20),\r\n  lastName: yup\r\n    .string()\r\n    .required('Required field')\r\n    .test('len', `Must be less than 20 characters`, (val) => val.length <= 20),\r\n  email: yup.string().required('Email adress is required').email('Bad email adress'),\r\n  password: yup\r\n    .string()\r\n    .required('Password is required')\r\n    .test('len', `Must be at least 8 characters`, (val) => val.length >= 8),\r\n});\r\n\r\nconst SignUp = (props) => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n\r\n  const isLoading = useSelector((state) => state.options.isLoading);\r\n  const isLoggedIn = useSelector((state) => state.user.isLoggedIn);\r\n  const error = useSelector((state) => state.user.signUpError);\r\n\r\n  const formObject = useForm({\r\n    mode: 'onSubmit',\r\n    resolver: yupResolver(schema),\r\n  });\r\n\r\n  const { handleSubmit, errors } = formObject;\r\n\r\n  const onSubmit = async (data) => {\r\n    dispatch(signup(data));\r\n  };\r\n\r\n  useEffect(() => {\r\n    isLoggedIn && props.history.push('/');\r\n  }, [isLoggedIn]);\r\n\r\n  return (\r\n    <FormProvider {...formObject}>\r\n      <Container className={classes.root} component='main' maxWidth='sm'>\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component='h1' variant='h5'>\r\n            Sign up\r\n          </Typography>\r\n          <form className={classes.form} onSubmit={handleSubmit(onSubmit)}>\r\n            <Grid container spacing={1}>\r\n              <Grid item xs={12} sm={6}>\r\n                <FormInput name='firstName' label='First Name' required={true} defaultValue={''} errorobj={errors} />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <FormInput name='lastName' label='Last Name' required={true} defaultValue={''} errorobj={errors} />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormInput name='email' label='Email' required={true} defaultValue={''} errorobj={errors} />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormInput\r\n                  name='password'\r\n                  label='Password'\r\n                  required={true}\r\n                  defaultValue={''}\r\n                  errorobj={errors}\r\n                  autoComplete='off'\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <p className={clsx(classes.errorMessage, { [classes.hide]: isLoading })}>{error.message}</p>\r\n                <div className={clsx(classes.loading, { [classes.hide]: !isLoading })}>\r\n                  <CircularProgress />\r\n                </div>\r\n              </Grid>\r\n            </Grid>\r\n            <Button type='submit' fullWidth variant='contained' color='primary' className={classes.submit}>\r\n              Sign Up\r\n            </Button>\r\n            <Grid container justify='flex-end'>\r\n              <Grid item>\r\n                <Link to='/login' variant='body2'>\r\n                  Already have an account? Sign in\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </div>\r\n        <Box mt={5}>\r\n          <Copyright />\r\n        </Box>\r\n      </Container>\r\n    </FormProvider>\r\n  );\r\n};\r\n\r\nexport default SignUp;\r\n","C:\\Projects\\CvManager\\cv-manager\\src\\components\\Login\\Login.js",["292","293"],"import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { Link } from 'react-router-dom';\r\nimport MuiLink from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport * as yup from 'yup';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useForm, FormProvider } from 'react-hook-form';\r\nimport { FormInput } from '../common/FormInputLogin.js';\r\nimport { RED_ERROR, LIGHT_BLUE } from '../../consts/colors.js';\r\nimport clsx from 'clsx';\r\nimport { HEADER_MARGIN, SIDE_PANEL_WIDTH_SHORT } from '../../consts/measures.js';\r\nimport { login } from '../../actions/userActions.js';\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant='body2' color='textSecondary' align='center'>\r\n      {'Copyright © '}\r\n      <MuiLink color='inherit' href='http://18.193.76.149/' rel='noopener noreferrer' target='_blank'>\r\n        Stas Tarasenko\r\n      </MuiLink>\r\n      &nbsp;\r\n      {new Date().getFullYear()}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    background: 'white',\r\n    marginTop: HEADER_MARGIN,\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    //width: '100%',\r\n    marginTop: theme.spacing(3),\r\n    '& a': {\r\n      textDecoration: 'none',\r\n    },\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  errorMessage: {\r\n    margin: 0,\r\n    padding: 0,\r\n    fontSize: '17px',\r\n    color: RED_ERROR,\r\n  },\r\n  loading: {\r\n    textAlign: 'center',\r\n    '& svg': {\r\n      color: LIGHT_BLUE,\r\n    },\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n    // visibility: 'hidden',\r\n  },\r\n}));\r\n\r\nconst schema = yup.object().shape({\r\n  email: yup.string().required('Email adress is required'),\r\n  password: yup.string().required('Password is required'),\r\n});\r\n\r\nconst Login = (props) => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const isLoading = useSelector((state) => state.options.isLoading);\r\n  const isLoggedIn = useSelector((state) => state.user.isLoggedIn);\r\n  const error = useSelector((state) => state.user.loginError);\r\n\r\n  const formObject = useForm({\r\n    mode: 'onSubmit',\r\n    resolver: yupResolver(schema),\r\n  });\r\n\r\n  const { handleSubmit, errors } = formObject;\r\n\r\n  const onSubmit = (data) => {\r\n    dispatch(login(data));\r\n  };\r\n\r\n  useEffect(() => {\r\n    isLoggedIn && props.history.push('/');\r\n  }, [isLoggedIn]);\r\n\r\n  return (\r\n    <FormProvider {...formObject}>\r\n      <Container className={classes.root} component='main' maxWidth='sm'>\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component='h1' variant='h5'>\r\n            Sign in\r\n          </Typography>\r\n          <form className={classes.form} onSubmit={handleSubmit(onSubmit)}>\r\n            <FormInput name='email' label='Email' required={true} defaultValue={''} errorobj={errors} />\r\n            <FormInput\r\n              name='password'\r\n              label='Password'\r\n              required={true}\r\n              defaultValue={''}\r\n              errorobj={errors}\r\n              autoComplete='off'\r\n            />\r\n            <div>\r\n              <p className={clsx(classes.errorMessage, { [classes.hide]: isLoading })}>{error.message}</p>\r\n            </div>\r\n            <div className={clsx(classes.loading, { [classes.hide]: !isLoading })}>\r\n              <CircularProgress />\r\n            </div>\r\n            {/* <FormControlLabel control={<Checkbox value='remember' color='primary' />} label='Remember me' /> */}\r\n            <Button type='submit' fullWidth variant='contained' color='primary' className={classes.submit}>\r\n              Login\r\n            </Button>\r\n            <Grid container>\r\n              <Grid item xs>\r\n                {/* <Link to='/' variant='body2'>\r\n                  Forgot password?\r\n                </Link> */}\r\n              </Grid>\r\n              <Grid item>\r\n                <Link to='/signup' variant='body2'>\r\n                  {\"Don't have an account? Sign Up\"}\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </div>\r\n        <Box mt={8}>\r\n          <Copyright />\r\n        </Box>\r\n      </Container>\r\n    </FormProvider>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\FormInputLogin.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\actions\\userActions.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\utills\\cookies.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\PrivateRoute.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\ConfirmDialog.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\Alert.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\consts\\strings.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\BiSwitch.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\utills\\actionsUtils.js",[],"C:\\Projects\\CvManager\\cv-manager\\src\\components\\common\\Copyright.js",[],{"ruleId":"294","replacedBy":"295"},{"ruleId":"296","replacedBy":"297"},{"ruleId":"298","severity":1,"message":"299","line":21,"column":6,"nodeType":"300","endLine":21,"endColumn":8,"suggestions":"301"},{"ruleId":"302","severity":1,"message":"303","line":34,"column":5,"nodeType":"304","messageId":"305","endLine":34,"endColumn":15},{"ruleId":"302","severity":1,"message":"303","line":35,"column":5,"nodeType":"304","messageId":"305","endLine":35,"endColumn":15},{"ruleId":"298","severity":1,"message":"299","line":92,"column":6,"nodeType":"300","endLine":92,"endColumn":8,"suggestions":"306"},{"ruleId":"298","severity":1,"message":"307","line":103,"column":6,"nodeType":"300","endLine":103,"endColumn":20,"suggestions":"308"},{"ruleId":"298","severity":1,"message":"309","line":108,"column":6,"nodeType":"300","endLine":108,"endColumn":17,"suggestions":"310"},{"ruleId":"298","severity":1,"message":"299","line":92,"column":6,"nodeType":"300","endLine":92,"endColumn":8,"suggestions":"311"},{"ruleId":"298","severity":1,"message":"307","line":103,"column":6,"nodeType":"300","endLine":103,"endColumn":20,"suggestions":"312"},{"ruleId":"298","severity":1,"message":"309","line":108,"column":6,"nodeType":"300","endLine":108,"endColumn":17,"suggestions":"313"},{"ruleId":"314","severity":1,"message":"315","line":17,"column":10,"nodeType":"316","messageId":"317","endLine":17,"endColumn":22},{"ruleId":"298","severity":1,"message":"299","line":91,"column":6,"nodeType":"300","endLine":91,"endColumn":8,"suggestions":"318"},{"ruleId":"298","severity":1,"message":"307","line":102,"column":6,"nodeType":"300","endLine":102,"endColumn":20,"suggestions":"319"},{"ruleId":"294","replacedBy":"320"},{"ruleId":"296","replacedBy":"321"},{"ruleId":"298","severity":1,"message":"322","line":92,"column":6,"nodeType":"300","endLine":92,"endColumn":8,"suggestions":"323"},{"ruleId":"298","severity":1,"message":"324","line":96,"column":6,"nodeType":"300","endLine":96,"endColumn":56,"suggestions":"325"},{"ruleId":"298","severity":1,"message":"326","line":116,"column":6,"nodeType":"300","endLine":116,"endColumn":16,"suggestions":"327"},{"ruleId":"314","severity":1,"message":"328","line":1,"column":38,"nodeType":"316","messageId":"317","endLine":1,"endColumn":44},{"ruleId":"298","severity":1,"message":"324","line":107,"column":6,"nodeType":"300","endLine":107,"endColumn":16,"suggestions":"329"},{"ruleId":"314","severity":1,"message":"330","line":75,"column":9,"nodeType":"316","messageId":"317","endLine":75,"endColumn":18},{"ruleId":"298","severity":1,"message":"299","line":127,"column":6,"nodeType":"300","endLine":127,"endColumn":12,"suggestions":"331"},{"ruleId":"298","severity":1,"message":"332","line":141,"column":6,"nodeType":"300","endLine":141,"endColumn":17,"suggestions":"333"},{"ruleId":"298","severity":1,"message":"334","line":150,"column":6,"nodeType":"300","endLine":150,"endColumn":33,"suggestions":"335"},{"ruleId":"298","severity":1,"message":"336","line":156,"column":6,"nodeType":"300","endLine":156,"endColumn":16,"suggestions":"337"},{"ruleId":"298","severity":1,"message":"338","line":167,"column":6,"nodeType":"300","endLine":167,"endColumn":16,"suggestions":"339"},{"ruleId":"314","severity":1,"message":"340","line":1,"column":17,"nodeType":"316","messageId":"317","endLine":1,"endColumn":25},{"ruleId":"314","severity":1,"message":"341","line":1,"column":27,"nodeType":"316","messageId":"317","endLine":1,"endColumn":36},{"ruleId":"314","severity":1,"message":"342","line":6,"column":10,"nodeType":"316","messageId":"317","endLine":6,"endColumn":20},{"ruleId":"314","severity":1,"message":"343","line":6,"column":22,"nodeType":"316","messageId":"317","endLine":6,"endColumn":31},{"ruleId":"314","severity":1,"message":"344","line":6,"column":33,"nodeType":"316","messageId":"317","endLine":6,"endColumn":38},{"ruleId":"314","severity":1,"message":"345","line":6,"column":40,"nodeType":"316","messageId":"317","endLine":6,"endColumn":44},{"ruleId":"314","severity":1,"message":"346","line":6,"column":46,"nodeType":"316","messageId":"317","endLine":6,"endColumn":55},{"ruleId":"314","severity":1,"message":"347","line":6,"column":57,"nodeType":"316","messageId":"317","endLine":6,"endColumn":61},{"ruleId":"314","severity":1,"message":"348","line":21,"column":25,"nodeType":"316","messageId":"317","endLine":21,"endColumn":47},{"ruleId":"298","severity":1,"message":"349","line":118,"column":6,"nodeType":"300","endLine":118,"endColumn":18,"suggestions":"350"},{"ruleId":"314","severity":1,"message":"348","line":21,"column":25,"nodeType":"316","messageId":"317","endLine":21,"endColumn":47},{"ruleId":"298","severity":1,"message":"349","line":105,"column":6,"nodeType":"300","endLine":105,"endColumn":18,"suggestions":"351"},"no-native-reassign",["352"],"no-negated-in-lhs",["353"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["354"],"no-dupe-keys","Duplicate key 'background'.","ObjectExpression","unexpected",["355"],"React Hook useEffect has a missing dependency: 'isEditMode'. Either include it or remove the dependency array.",["356"],"React Hook useEffect has missing dependencies: 'dispatch', 'showSnackbar', and 'successResponse'. Either include them or remove the dependency array.",["357"],["358"],["359"],["360"],"no-unused-vars","'showErrorOff' is defined but never used.","Identifier","unusedVar",["361"],["362"],["352"],["353"],"React Hook useEffect has missing dependencies: 'coverList.length', 'cvList.length', and 'dispatch'. Either include them or remove the dependency array.",["363"],"React Hook useEffect has a missing dependency: 'reset'. Either include it or remove the dependency array.",["364"],"React Hook useEffect has missing dependencies: 'initDescription', 'initName', and 'reset'. Either include them or remove the dependency array.",["365"],"'useRef' is defined but never used.",["366"],"'bottomRef' is assigned a value but never used.",["367"],"React Hook useEffect has missing dependencies: 'contentState', 'data.from', 'data.subject', 'data.to', 'dispatch', 'selectedCv.file', 'textDirectionLtr', and 'userEmailAdress'. Either include them or remove the dependency array.",["368"],"React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.",["369"],"React Hook useEffect has a missing dependency: 'contentState'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setInitContentState' needs the current value of 'contentState'.",["370"],"React Hook useEffect has missing dependencies: 'dispatch' and 'isSending'. Either include them or remove the dependency array.",["371"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'LIGHT_BLUE' is defined but never used.","'DARK_BLUE' is defined but never used.","'LIGHT' is defined but never used.","'DARK' is defined but never used.","'RED_ERROR' is defined but never used.","'LIME' is defined but never used.","'SIDE_PANEL_WIDTH_SHORT' is defined but never used.","React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.",["372"],["373"],"no-global-assign","no-unsafe-negation",{"desc":"374","fix":"375"},{"desc":"374","fix":"376"},{"desc":"377","fix":"378"},{"desc":"379","fix":"380"},{"desc":"374","fix":"381"},{"desc":"377","fix":"382"},{"desc":"379","fix":"383"},{"desc":"374","fix":"384"},{"desc":"377","fix":"385"},{"desc":"386","fix":"387"},{"desc":"388","fix":"389"},{"desc":"390","fix":"391"},{"desc":"392","fix":"393"},{"desc":"394","fix":"395"},{"desc":"396","fix":"397"},{"desc":"398","fix":"399"},{"desc":"400","fix":"401"},{"desc":"402","fix":"403"},{"desc":"404","fix":"405"},{"desc":"404","fix":"406"},"Update the dependencies array to be: [dispatch]",{"range":"407","text":"408"},{"range":"409","text":"408"},"Update the dependencies array to be: [isEditMode, requestError]",{"range":"410","text":"411"},"Update the dependencies array to be: [dispatch, showError, showSnackbar, successResponse]",{"range":"412","text":"413"},{"range":"414","text":"408"},{"range":"415","text":"411"},{"range":"416","text":"413"},{"range":"417","text":"408"},{"range":"418","text":"411"},"Update the dependencies array to be: [coverList.length, cvList.length, dispatch]",{"range":"419","text":"420"},"Update the dependencies array to be: [initName, initCvId, initDescription, initCoverId, reset]",{"range":"421","text":"422"},"Update the dependencies array to be: [initDescription, initFile, initName, reset]",{"range":"423","text":"424"},"Update the dependencies array to be: [initName, reset]",{"range":"425","text":"426"},"Update the dependencies array to be: [data, dispatch]",{"range":"427","text":"428"},"Update the dependencies array to be: [contentState, data.from, data.subject, data.to, dispatch, isSending, selectedCv.file, textDirectionLtr, userEmailAdress]",{"range":"429","text":"430"},"Update the dependencies array to be: [data, selectedCover, selectedCv]",{"range":"431","text":"432"},"Update the dependencies array to be: [contentState, editMode]",{"range":"433","text":"434"},"Update the dependencies array to be: [dispatch, isSended, isSending]",{"range":"435","text":"436"},"Update the dependencies array to be: [isLoggedIn, props.history]",{"range":"437","text":"438"},{"range":"439","text":"438"},[845,847],"[dispatch]",[3213,3215],[3443,3457],"[isEditMode, requestError]",[3598,3609],"[dispatch, showError, showSnackbar, successResponse]",[3317,3319],[3547,3561],[3702,3713],[3272,3274],[3502,3516],[3024,3026],"[coverList.length, cvList.length, dispatch]",[3166,3216],"[initName, initCvId, initDescription, initCoverId, reset]",[3961,3971],"[initDescription, initFile, initName, reset]",[3098,3108],"[initName, reset]",[4068,4074],"[data, dispatch]",[4411,4422],"[contentState, data.from, data.subject, data.to, dispatch, isSending, selectedCv.file, textDirectionLtr, userEmailAdress]",[4779,4806],"[data, selectedCover, selectedCv]",[4908,4918],"[contentState, editMode]",[5197,5207],"[dispatch, isSended, isSending]",[3481,3493],"[isLoggedIn, props.history]",[3078,3090]]